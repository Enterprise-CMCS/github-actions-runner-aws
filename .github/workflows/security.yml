name: Run security scans

on:
  # workflow_dispatch: # this effectively disables the workflow for now since it's an example only
  push:
    branches:
      - bharvey-slack-from-security

permissions:
  id-token: write

jobs:
  # This job is for scan tools that require a built Docker image
  build-and-test-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Build and export
  #       uses: docker/build-push-action@v3
  #       with:
  #         context: .
  #         load: true
  #         tags: security:latest
  #         cache-from: type=gha # use the GitHub Cache API
  #         cache-to: type=gha,mode=max
  #         # outputs: type=docker,dest=/tmp/myimage.tar  # use this if we need to share the image between jobs

  #     # Trivy -------------

  #     - name: Get Trivy template
  #       run: curl --fail --show-error --output asff.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/asff.tpl

  #     # tool output directories should follow the format 'scans/{tool name}' to avoid naming collisions
  #     - name: Make Trivy directory
  #       run: mkdir -p scans/trivy

  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: security:latest
  #         format: template
  #         template: "@asff.tpl"
  #         ignore-unfixed: true
  #         vuln-type: "os,library"
  #         output: scans/trivy/trivy-asff.json
  #       env:
  #         # these are required by the Trivy template
  #         AWS_REGION: us-east-1
  #         AWS_ACCOUNT_ID: "037370603820"

  #     - name: Reformat Trivy ASFF # see https://github.com/aquasecurity/trivy/blob/8ad9b8a939a0001a07ef46faa2686d3f115f0754/docs/tutorials/integrations/aws-security-hub.md
  #       run: jq '.Findings' scans/trivy/trivy-asff.json > /tmp/tmp.json && mv  /tmp/tmp.json scans/trivy/trivy-asff.json

  #     - name: Upload Trivy ASFF
  #       uses: ./.github/actions/upload-asff
  #       with:
  #         asff-directory-path: scans/trivy
  #         company-name: Aquasecurity
  #         product-name: Trivy
  #         oidc-iam-role-arn: ${{ secrets.OIDC_IAM_ROLE_ARN }}

  #     # Dockle -------------

  #     - name: Make Dockle directory
  #       run: mkdir -p scans/dockle

  #     - name: Run Dockle
  #       uses: docker://goodwithtech/dockle:latest
  #       with:
  #         args: -f sarif -o scans/dockle/dockle.json security:latest

  #     - name: Convert Dockle sarif to HDF
  #       uses: mitre/saf_action@v1
  #       with:
  #         command_string: "convert sarif2hdf -i scans/dockle/dockle.json -o scans/dockle/dockle-hdf" # the converter adds the .json suffix to the output

  #     - name: Convert Dockle HDF to ASFF
  #       uses: mitre/saf_action@v1
  #       with:
  #         # 'saf convert:hdf2asff' creates a new folder for the output with 1 or more zero-indexed files named `asff.p{index}.json, e.g. 'asff.p0.json'
  #         command_string: "convert hdf2asff -i scans/dockle/dockle-hdf.json -a 037370603820 -r us-east-1 -t dockle -o scans/dockle/asff"

  #     - name: Upload Dockle ASFF
  #       uses: ./.github/actions/upload-asff
  #       with:
  #         asff-directory-path: scans/dockle/asff
  #         company-name: Goodwith
  #         product-name: Dockle
  #         oidc-iam-role-arn: ${{ secrets.OIDC_IAM_ROLE_ARN }}

  # run-inspec:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout # required for use of the local composite action below
  #       uses: actions/checkout@v3

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-region: us-east-1
  #         role-to-assume: ${{ secrets.OIDC_IAM_ROLE_ARN }}

  #     - name: Install Inspec
  #       run: curl  --fail --show-error https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec

  #     - name: Run Inspec profile
  #       run: inspec exec https://github.com/Staggerlee011/s3-bp-benchmark/archive/master.tar.gz -t aws:// --input s3_name=aws-cms-oit-iusg-spe-cmcs-macbis-dev-tf-state-us-east-1 --reporter=cli json:scans/inspec/hdf/inspec_hdf.json --chef-license accept

  #     - name: Convert Inspec HDF to ASFF
  #       uses: mitre/saf_action@v1
  #       with:
  #         command_string: "convert hdf2asff -i scans/inspec/hdf/inspec_hdf.json -a 037370603820 -r us-east-1 -t inspec -o scans/inspec/asff"

  #     - name: Upload Inspec ASFF
  #       uses: ./.github/actions/upload-asff
  #       with:
  #         asff-directory-path: scans/inspec/asff
  #         company-name: Chef
  #         product-name: Inspec

  # Commenting out SonarQube until https://github.com/mitre/heimdall2/pull/3650 is merged

  # Tools that require self-hosted runners should be run after this job
  # start-runners:
  #   name: Provision self-hosted runners
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-region: us-east-1
  #         role-to-assume: ${{ secrets.OIDC_IAM_ROLE_ARN }}

  #     - name: Scale up ECS service
  #       uses: Enterprise-CMCS/ecs-scale-service@main
  #       with:
  #         cluster: gh-runner-6d81a626-1844-5df5-a3e3-cbbbeab84233
  #         service: gh-runner-6d81a626-1844-5df5-a3e3-cbbbeab84233
  #         desired-count: 1

  # run-sonarqube:
  #   needs: start-runners
  #   runs-on: self-hosted
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Get branch name
  #       shell: bash
  #       run: echo "::set-output name=branch-name::${GITHUB_REF#refs/heads/}"
  #       id: get-branch-name

  #     - name: Set up Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16

  #     - name: Create SonarQube directory
  #       run: mkdir sonar_scanner

  #     - name: Cache SonarQube
  #       uses: actions/cache@v3
  #       id: cache-sonarqube
  #       with:
  #         path: sonar_scanner
  #         key: ${{ runner.os }}-sonar-scanner-cli-4.7.0.2747

  #     - name: Install SonarQube
  #       if: steps.cache-sonarqube.outputs.cache-hit != true
  #       run: |
  #         curl --fail --show-error --silent --location --output sonar_scanner/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip  \
  #         && unzip sonar_scanner/sonar-scanner.zip

  #     - name: Add SonarQube to PATH
  #       run: PATH="sonar_scanner/bin:${PATH}"

  #     - name: Cache SonarQube cache
  #       uses: actions/cache@v3
  #       with:
  #         path: /home/runner/.sonar/cache
  #         key: ${{ runner.os }}-sonarqube

  #     - name: SonarQube scan
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  #       run: sonar-scanner -Dsonar.projectKey=mac-fc-github-actions-runner-aws

  #     - name: Run SAF CLI on SonarQube
  #       uses: mitre/saf_action@v1
  #       with:
  #         command_string: "convert sonarqube2hdf -a ${{ secrets.SONAR_TOKEN }} -u ${{ secrets.SONAR_HOST_URL }} -n mac-fc-github-actions-runner-aws -o scans/sonarqube/sonarqube_hdf.json -b ${{ steps.get-branch-name.outputs.branch-name }}"

  #     - name: Convert SonarQube HDF to ASFF
  #       uses: mitre/saf_action@v1
  #       with:
  #         command_string: "convert hdf2asff -i scans/sonarqube/sonarqube_hdf.json -a 156322662943 -r us-east-1 -t sonarqube -o scans/sonarqube/asff"

  #     - name: Upload SonarQube ASFF
  #       uses: ./.github/actions/upload-asff
  #       with:
  #         asff-directory-path: scans/sonarqube/asff
  #         company-name: SonarQube
  #         product-name: SonarQube

  # stop-runners:
  #   name: Deprovision self-hosted runners
  #   runs-on: ubuntu-latest
  #   if: always()
  #   needs: [start-runners, run-sonarqube]
  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-region: us-east-1
  #         role-to-assume: ${{ secrets.OIDC_IAM_ROLE_ARN }}

  #     - name: Scale down ECS service
  #       uses: Enterprise-CMCS/ecs-scale-service@main
  #       with:
  #         cluster: gh-runner-6d81a626-1844-5df5-a3e3-cbbbeab84233
  #         service: gh-runner-6d81a626-1844-5df5-a3e3-cbbbeab84233
  #         desired-count: 0

  slack-notification:
    name: Slack notificiation
    needs: publish # set "needs" to the job directly before this one
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: technote-space/workflow-conclusion-action@v3

      - name: slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "Security scan workflow result: ${{ env.WORKFLOW_CONCLUSION }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Security scan workflow result: ${{ env.WORKFLOW_CONCLUSION }}
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
