name: Reusable build and push

on:
  workflow_call:
    inputs:
      dockerfile:
        description: "Path to the Dockerfile to build"
        type: string
        default: "latest.Dockerfile"
      image_tag:
        description: "Tag to apply to the Docker image"
        type: string
        default: "latest"    

permissions:
  id-token: write

jobs:
  set-runner-uuid:
    name: Set runner UUID
    runs-on: ubuntu-latest
    outputs:
      runner-uuid: ${{ steps.set-uuid.outputs.runner-uuid }}
    steps:
      - name: Set UUID for the runner
        id: set-uuid
        run: echo "runner-uuid=$(uuidgen)" >> $GITHUB_OUTPUT

  build-and-test:
    name: Build and test the runner image
    runs-on: ubuntu-latest
    needs: set-runner-uuid
    outputs:
      image-tag-with-sha: ${{ steps.set-image-tag-with-sha.outputs.image-tag-with-sha }}
      image-tag-with-repo: ${{ steps.set-image-tag-with-repo.outputs.image-tag-with-repo }}
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OIDC_IAM_ROLE_ARN }}

      - name: Log in to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set image tag with short SHA
        id: set-image-tag-with-sha
        run: echo "image-tag-with-sha=${{ inputs.image_tag }}-$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_OUTPUT

      - name: Set image tag with ECR repo
        id: set-image-tag-with-repo
        run: echo "image-tag-with-repo=${{ steps.login-ecr.outputs.registry }}/github-actions-runner:${{ steps.set-image-tag-with-sha.outputs.image-tag-with-sha }}" >> $GITHUB_OUTPUT
            
      - name: Set Docker env variables
        run: cat docker.env >> $GITHUB_ENV

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          tags: ${{ steps.set-image-tag-with-repo.outputs.image-tag-with-repo }}
          build-args: ACTIONS_VERSION
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true # export a tarball so we can run the image tests locally before pushing to ECR
          provenance: false # the default behavior adds an 'image index' which clutters up ECR, see https://github.com/docker/buildx/issues/1533

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.set-image-tag-with-repo.outputs.image-tag-with-repo }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Run Dockle image linter
        uses: hands-lab/dockle-action@v1
        env:
          DOCKLE_ACCEPT_FILE_EXTENSIONS: pem
        with:
          image: ${{ steps.set-image-tag-with-repo.outputs.image-tag-with-repo }}
          exit-code: "1"

      - name: Push Docker image to ECR with just SHA tag
        run: docker push ${{ steps.set-image-tag-with-repo.outputs.image-tag-with-repo }}
  
  run-docker-image:
    name: Run Docker image
    needs: [ set-runner-uuid, build-and-test ]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OIDC_IAM_ROLE_ARN }}

      - name: Log in to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Run Docker image
        run: |
          docker run --rm \
          -e REPO_OWNER=${{ github.repository_owner }} \
          -e REPO_NAME=$(basename ${{ github.repository }}) \
          -e PERSONAL_ACCESS_TOKEN=${{ secrets.SERVICE_ACCOUNT_GITHUB_TOKEN }} \
          -e RUNNER_UUID=${{ needs.set-runner-uuid.outputs.runner-uuid }} \
          ${{ needs.build-and-test.outputs.image-tag-with-repo }}

  wait-for-runner:
    name: Wait for the runner to be ready
    needs: [ set-runner-uuid, build-and-test ]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Poll the GitHub Actions API until the runner is registered and online
        run: |
          response_file=$(mktemp)
          until \
            status=$(curl -s \
              -H "Accept: application/vnd.github.v3+json" \
              -u robot-mac-fc:${{ secrets.SERVICE_ACCOUNT_GITHUB_TOKEN }} \
              -o $response_file \
              -w "%{http_code}" \
              --url https://api.github.com/repos/${{ github.repository }}/actions/runners
            )

            if [ $? -ne 0 ] || [ $status -ne 200 ]; then
              echo "error getting runner status from GitHub"
              echo "curl exited with code $?"
              echo "response status: $status"
              echo "response body: $(cat $response_file)"
              exit 1
            fi

            cat $response_file | jq -e '.runners | .[] | select(.name == "${{ needs.set-runner-uuid.outputs.runner-uuid }}") | .status == "online"' >/dev/null
          do
            echo "Waiting for runner ${{ needs.set-runner-uuid.outputs.runner-uuid }} to be ready" && sleep 10
          done
          echo "Runner ${{ needs.set-runner-uuid.outputs.runner-uuid }} is ready"

  test-runner:
    name: Test the runner
    needs: [ set-runner-uuid, wait-for-runner ]
    runs-on:
      - self-hosted
      - ${{ needs.set-runner-uuid.outputs.runner-uuid }}
    timeout-minutes: 5
    steps:
      - name: Test the runner
        run: echo "Self-hosted runner test was successful!"

  add-tag-if-main:
    name: Add tag to image if branch is 'main'
    if: ${{ github.ref == 'refs/heads/main'
    needs: [test-runner, build-and-test]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OIDC_IAM_ROLE_ARN }}

      - name: Add 'official' tag (without SHA) to image
        uses: abronin/ecr-retag-action@v1
        with:
          repository: github-actions-runner
          tag: ${{ needs.build-and-test.outputs.image-tag-with-sha }}
          new-tags: ${{ inputs.image_tag }}
